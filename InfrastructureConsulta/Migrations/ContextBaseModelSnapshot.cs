// <auto-generated />
using System;
using Infrastructure.Consulta.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Consulta.Migrations
{
    [DbContext(typeof(ContextBase))]
    partial class ContextBaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Domain.Consulta.Entities.Acesso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Empresa_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("empresa_id");

                    b.Property<Guid>("Usuario_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.Property<string>("tipo")
                        .HasColumnType("char(1)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("Empresa_Id")
                        .IsUnique();

                    b.HasIndex("Usuario_Id")
                        .IsUnique();

                    b.ToTable("acesso", "consultapsi");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Consulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comentario")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comentario");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("horario");

                    b.Property<DateTime>("HorarioSatisfacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("horariosatisfacao");

                    b.Property<bool>("JaViuSatisfacao")
                        .HasColumnType("boolean")
                        .HasColumnName("javiusatisfacao");

                    b.Property<string>("Obervacao")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("observacao");

                    b.Property<Guid>("Paciente_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("paciente_id");

                    b.Property<Guid>("Psicologa_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("psicologa_id");

                    b.Property<int>("Satisfacao")
                        .HasColumnType("int")
                        .HasColumnName("satisfacao");

                    b.Property<string>("Status")
                        .HasColumnType("char(1)")
                        .HasColumnName("status");

                    b.Property<bool>("UmaHora")
                        .HasColumnType("boolean")
                        .HasColumnName("umahora");

                    b.Property<string>("proposito")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("proposito");

                    b.HasKey("Id");

                    b.HasIndex("Paciente_Id")
                        .IsUnique();

                    b.HasIndex("Psicologa_Id")
                        .IsUnique();

                    b.ToTable("consulta", "consultapsi");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bairro")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("bairro");

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(14)")
                        .HasColumnName("celular");

                    b.Property<string>("Cep")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("cidade");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("endereco");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(14)")
                        .HasColumnName("telefone");

                    b.Property<string>("cnpj")
                        .HasColumnType("varchar(18)")
                        .HasColumnName("cnpj");

                    b.HasKey("Id");

                    b.ToTable("empresa", "consultapsi");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Acesso_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("acesso_id");

                    b.Property<string>("Bairro")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("bairro");

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(14)")
                        .HasColumnName("celular");

                    b.Property<string>("Cep")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("cidade");

                    b.Property<DateTime>("DtNascimento")
                        .HasColumnType("Date")
                        .HasColumnName("dt_nascimento");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("endereco");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(14)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.HasIndex("Acesso_Id")
                        .IsUnique();

                    b.ToTable("paciente", "consultapsi");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Psicologa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Acesso_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("acesso_id");

                    b.Property<string>("Bairro")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("bairro");

                    b.Property<string>("CRP")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("crp");

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(14)")
                        .HasColumnName("celular");

                    b.Property<string>("Cep")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("cidade");

                    b.Property<DateTime>("DtNascimento")
                        .HasColumnType("Date")
                        .HasColumnName("dt_nascimento");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("endereco");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(14)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.HasIndex("Acesso_Id")
                        .IsUnique();

                    b.ToTable("psicologa", "consultapsi");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("usuario", "consultapsi");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Acesso", b =>
                {
                    b.HasOne("Domain.Consulta.Entities.Empresa", "Empresa")
                        .WithOne("Acesso")
                        .HasForeignKey("Domain.Consulta.Entities.Acesso", "Empresa_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Consulta.Entities.Usuario", "Usuario")
                        .WithOne("Acesso")
                        .HasForeignKey("Domain.Consulta.Entities.Acesso", "Usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Consulta", b =>
                {
                    b.HasOne("Domain.Consulta.Entities.Paciente", "Paciente")
                        .WithOne("Consulta")
                        .HasForeignKey("Domain.Consulta.Entities.Consulta", "Paciente_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Consulta.Entities.Psicologa", "Psicologa")
                        .WithOne("Consulta")
                        .HasForeignKey("Domain.Consulta.Entities.Consulta", "Psicologa_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Psicologa");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Paciente", b =>
                {
                    b.HasOne("Domain.Consulta.Entities.Acesso", "Acesso")
                        .WithOne("Paciente")
                        .HasForeignKey("Domain.Consulta.Entities.Paciente", "Acesso_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acesso");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Psicologa", b =>
                {
                    b.HasOne("Domain.Consulta.Entities.Acesso", "Acesso")
                        .WithOne("Psicologa")
                        .HasForeignKey("Domain.Consulta.Entities.Psicologa", "Acesso_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acesso");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Acesso", b =>
                {
                    b.Navigation("Paciente");

                    b.Navigation("Psicologa");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Empresa", b =>
                {
                    b.Navigation("Acesso");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Paciente", b =>
                {
                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Psicologa", b =>
                {
                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("Domain.Consulta.Entities.Usuario", b =>
                {
                    b.Navigation("Acesso");
                });
#pragma warning restore 612, 618
        }
    }
}
